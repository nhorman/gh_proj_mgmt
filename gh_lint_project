#!/bin/bash

TEMPDIR=$(mktemp -d /tmp/ghscratch.XXXXXX)

cleanup() {
    rm -rf $TEMPDIR
}

trap cleanup EXIT

. ./gh_common.sh


fetch_issues_json() {
    local pnum=$1
    local outfile=$2

    gh project item-list --owner openssl --format json -L 1000 $pnum > $outfile 2>&1
}

eval_issue() {
    local idx
    local isepic
    local issubepic
    local status
    local iurl
    local check

    export idx=$1

    ### Get the issue url
    export iurl=$(jq -r '.items[$ENV.idx | tonumber].content.url' $TEMPDIR/issues.json)

    ### get the epic and subepic labels
    isepic=$(jq '.items[$ENV.idx | tonumber].labels | select(index("epic")) | .[]' $TEMPDIR/issues.json)
    issubepic=$(jq '.items[$ENV.idx | tonumber].labels | select(index("subepic")) | .[]' $TEMPDIR/issues.json)

    ### get the status of the issue
    status=$(jq '.items[$ENV.idx | tonumber].status' $TEMPDIR/issues.json)

    ### If the issue is done, ignore it
    if [ "$status" == "Done" ]
    then
        return
    fi

    # Check to ensure no epics are on the development board
    if [ -z "$isepic" -a -n "$issubepic" ]
    then
        # This is an epic, should not be on the development board
        check=$(jq '.items[] | select (.content.url == $ENV.iurl)' $TEMPDIR/devboard.json)
        if [ ! -z "$check" ]
        then
            echo "issue $iurl is an epic, but is on the development board"
        fi
        return
    fi

    # Check to ensure no subepics are missing the epic label
    if [ -z "$isepic" -a -n "$issubepic" ]
    then
        echo "issue $iurl is a subepic, but is not also marked as epic"
        return
    fi

    # The remaining cases (epic+subepic and regular issues)
    # Are handled the same way, just make sure they are on the dev board

    check=$(jq '.items[] | select (.content.url == $ENV.iurl)' $TEMPDIR/devboard.json)
    if [ -z "$check" ]
    then
        echo "Issue $iurl is on the project board, but missing from the dev board"
        return
   fi

}

check_issues() {
    local tnum=$(jq '.items | length' $TEMPDIR/issues.json)

    let tnum=$tnum-1
    for i in $(seq 0 1 $tnum)
    do
        eval_issue $i
    done
}

##### START #####
##### Get the project number #####
mypnum=$(lookup_project "$1")

#### validate it ####
case $mypnum in
    ''|*[!0-9]*)
        echo "Invalid project id for $1"
        exit 1
        ;;
    *)
        ;;
esac

mydevnum=$(lookup_project "Development Board")

#### validate it ####
case $mydevnum in
    ''|*[!0-9]*)
        echo "Invalid project id for $1"
        exit 1
        ;;
    *)
        ;;
esac

echo "Fetching issues for $1"
fetch_issues_json $mypnum $TEMPDIR/issues.json
echo "Fetching development board issues"
fetch_issues_json $mydevnum $TEMPDIR/devboard.json

check_issues
